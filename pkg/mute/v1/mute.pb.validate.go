// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/mute/v1/mute.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Mute with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Mute) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Mute with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MuteMultiError, or nil if none found.
func (m *Mute) ValidateAll() error {
	return m.validate(true)
}

func (m *Mute) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMuteRanges() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MuteValidationError{
						field:  fmt.Sprintf("MuteRanges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MuteValidationError{
						field:  fmt.Sprintf("MuteRanges[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MuteValidationError{
					field:  fmt.Sprintf("MuteRanges[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetNotify()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MuteValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MuteValidationError{
					field:  "Notify",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotify()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MuteValidationError{
				field:  "Notify",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetNotifyTargets() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MuteValidationError{
						field:  fmt.Sprintf("NotifyTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MuteValidationError{
						field:  fmt.Sprintf("NotifyTargets[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MuteValidationError{
					field:  fmt.Sprintf("NotifyTargets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetOnetime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MuteValidationError{
					field:  "Onetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MuteValidationError{
					field:  "Onetime",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOnetime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MuteValidationError{
				field:  "Onetime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRepeat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MuteValidationError{
					field:  "Repeat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MuteValidationError{
					field:  "Repeat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRepeat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MuteValidationError{
				field:  "Repeat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetMuteTags() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MuteValidationError{
						field:  fmt.Sprintf("MuteTags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MuteValidationError{
						field:  fmt.Sprintf("MuteTags[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MuteValidationError{
					field:  fmt.Sprintf("MuteTags[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MuteMultiError(errors)
	}

	return nil
}

// MuteMultiError is an error wrapping multiple validation errors returned by
// Mute.ValidateAll() if the designated constraints aren't met.
type MuteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteMultiError) AllErrors() []error { return m }

// MuteValidationError is the validation error returned by Mute.Validate if the
// designated constraints aren't met.
type MuteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteValidationError) ErrorName() string { return "MuteValidationError" }

// Error satisfies the builtin error interface
func (e MuteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMute.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteValidationError{}

// Validate checks the field values on MuteRange with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MuteRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteRange with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MuteRangeMultiError, or nil
// if none found.
func (m *MuteRange) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetMonitor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MuteRangeValidationError{
					field:  "Monitor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MuteRangeValidationError{
					field:  "Monitor",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMonitor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MuteRangeValidationError{
				field:  "Monitor",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetAlertPolicy()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MuteRangeValidationError{
					field:  "AlertPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MuteRangeValidationError{
					field:  "AlertPolicy",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAlertPolicy()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MuteRangeValidationError{
				field:  "AlertPolicy",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MuteRangeMultiError(errors)
	}

	return nil
}

// MuteRangeMultiError is an error wrapping multiple validation errors returned
// by MuteRange.ValidateAll() if the designated constraints aren't met.
type MuteRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteRangeMultiError) AllErrors() []error { return m }

// MuteRangeValidationError is the validation error returned by
// MuteRange.Validate if the designated constraints aren't met.
type MuteRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteRangeValidationError) ErrorName() string { return "MuteRangeValidationError" }

// Error satisfies the builtin error interface
func (e MuteRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteRangeValidationError{}

// Validate checks the field values on MuteRangeAlertPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MuteRangeAlertPolicy) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteRangeAlertPolicy with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteRangeAlertPolicyMultiError, or nil if none found.
func (m *MuteRangeAlertPolicy) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteRangeAlertPolicy) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MuteRangeAlertPolicyMultiError(errors)
	}

	return nil
}

// MuteRangeAlertPolicyMultiError is an error wrapping multiple validation
// errors returned by MuteRangeAlertPolicy.ValidateAll() if the designated
// constraints aren't met.
type MuteRangeAlertPolicyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteRangeAlertPolicyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteRangeAlertPolicyMultiError) AllErrors() []error { return m }

// MuteRangeAlertPolicyValidationError is the validation error returned by
// MuteRangeAlertPolicy.Validate if the designated constraints aren't met.
type MuteRangeAlertPolicyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteRangeAlertPolicyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteRangeAlertPolicyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteRangeAlertPolicyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteRangeAlertPolicyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteRangeAlertPolicyValidationError) ErrorName() string {
	return "MuteRangeAlertPolicyValidationError"
}

// Error satisfies the builtin error interface
func (e MuteRangeAlertPolicyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteRangeAlertPolicy.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteRangeAlertPolicyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteRangeAlertPolicyValidationError{}

// Validate checks the field values on MuteRangeMonitor with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MuteRangeMonitor) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MuteRangeMonitor with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MuteRangeMonitorMultiError, or nil if none found.
func (m *MuteRangeMonitor) ValidateAll() error {
	return m.validate(true)
}

func (m *MuteRangeMonitor) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return MuteRangeMonitorMultiError(errors)
	}

	return nil
}

// MuteRangeMonitorMultiError is an error wrapping multiple validation errors
// returned by MuteRangeMonitor.ValidateAll() if the designated constraints
// aren't met.
type MuteRangeMonitorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MuteRangeMonitorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MuteRangeMonitorMultiError) AllErrors() []error { return m }

// MuteRangeMonitorValidationError is the validation error returned by
// MuteRangeMonitor.Validate if the designated constraints aren't met.
type MuteRangeMonitorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MuteRangeMonitorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MuteRangeMonitorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MuteRangeMonitorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MuteRangeMonitorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MuteRangeMonitorValidationError) ErrorName() string { return "MuteRangeMonitorValidationError" }

// Error satisfies the builtin error interface
func (e MuteRangeMonitorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMuteRangeMonitor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MuteRangeMonitorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MuteRangeMonitorValidationError{}

// Validate checks the field values on NotifyOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyOptionsMultiError, or
// nil if none found.
func (m *NotifyOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Message != nil {
		// no validation rules for Message
	}

	if m.BeforeTime != nil {
		// no validation rules for BeforeTime
	}

	if len(errors) > 0 {
		return NotifyOptionsMultiError(errors)
	}

	return nil
}

// NotifyOptionsMultiError is an error wrapping multiple validation errors
// returned by NotifyOptions.ValidateAll() if the designated constraints
// aren't met.
type NotifyOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyOptionsMultiError) AllErrors() []error { return m }

// NotifyOptionsValidationError is the validation error returned by
// NotifyOptions.Validate if the designated constraints aren't met.
type NotifyOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyOptionsValidationError) ErrorName() string { return "NotifyOptionsValidationError" }

// Error satisfies the builtin error interface
func (e NotifyOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyOptionsValidationError{}

// Validate checks the field values on NotifyTarget with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NotifyTarget) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTarget with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotifyTargetMultiError, or
// nil if none found.
func (m *NotifyTarget) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTarget) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetMemberGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyTargetValidationError{
					field:  "MemberGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyTargetValidationError{
					field:  "MemberGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMemberGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyTargetValidationError{
				field:  "MemberGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetNotification()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotifyTargetValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotifyTargetValidationError{
					field:  "Notification",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNotification()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotifyTargetValidationError{
				field:  "Notification",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotifyTargetMultiError(errors)
	}

	return nil
}

// NotifyTargetMultiError is an error wrapping multiple validation errors
// returned by NotifyTarget.ValidateAll() if the designated constraints aren't met.
type NotifyTargetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetMultiError) AllErrors() []error { return m }

// NotifyTargetValidationError is the validation error returned by
// NotifyTarget.Validate if the designated constraints aren't met.
type NotifyTargetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetValidationError) ErrorName() string { return "NotifyTargetValidationError" }

// Error satisfies the builtin error interface
func (e NotifyTargetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTarget.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetValidationError{}

// Validate checks the field values on NotifyTargetMemberGroup with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyTargetMemberGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTargetMemberGroup with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyTargetMemberGroupMultiError, or nil if none found.
func (m *NotifyTargetMemberGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTargetMemberGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return NotifyTargetMemberGroupMultiError(errors)
	}

	return nil
}

// NotifyTargetMemberGroupMultiError is an error wrapping multiple validation
// errors returned by NotifyTargetMemberGroup.ValidateAll() if the designated
// constraints aren't met.
type NotifyTargetMemberGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetMemberGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetMemberGroupMultiError) AllErrors() []error { return m }

// NotifyTargetMemberGroupValidationError is the validation error returned by
// NotifyTargetMemberGroup.Validate if the designated constraints aren't met.
type NotifyTargetMemberGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetMemberGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetMemberGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetMemberGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetMemberGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetMemberGroupValidationError) ErrorName() string {
	return "NotifyTargetMemberGroupValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyTargetMemberGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTargetMemberGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetMemberGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetMemberGroupValidationError{}

// Validate checks the field values on NotifyTargetNotification with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NotifyTargetNotification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NotifyTargetNotification with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NotifyTargetNotificationMultiError, or nil if none found.
func (m *NotifyTargetNotification) ValidateAll() error {
	return m.validate(true)
}

func (m *NotifyTargetNotification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return NotifyTargetNotificationMultiError(errors)
	}

	return nil
}

// NotifyTargetNotificationMultiError is an error wrapping multiple validation
// errors returned by NotifyTargetNotification.ValidateAll() if the designated
// constraints aren't met.
type NotifyTargetNotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotifyTargetNotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotifyTargetNotificationMultiError) AllErrors() []error { return m }

// NotifyTargetNotificationValidationError is the validation error returned by
// NotifyTargetNotification.Validate if the designated constraints aren't met.
type NotifyTargetNotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotifyTargetNotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotifyTargetNotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotifyTargetNotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotifyTargetNotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotifyTargetNotificationValidationError) ErrorName() string {
	return "NotifyTargetNotificationValidationError"
}

// Error satisfies the builtin error interface
func (e NotifyTargetNotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotifyTargetNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotifyTargetNotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotifyTargetNotificationValidationError{}

// Validate checks the field values on OnetimeOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *OnetimeOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OnetimeOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OnetimeOptionsMultiError,
// or nil if none found.
func (m *OnetimeOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *OnetimeOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Start != nil {
		// no validation rules for Start
	}

	if m.End != nil {
		// no validation rules for End
	}

	if len(errors) > 0 {
		return OnetimeOptionsMultiError(errors)
	}

	return nil
}

// OnetimeOptionsMultiError is an error wrapping multiple validation errors
// returned by OnetimeOptions.ValidateAll() if the designated constraints
// aren't met.
type OnetimeOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OnetimeOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OnetimeOptionsMultiError) AllErrors() []error { return m }

// OnetimeOptionsValidationError is the validation error returned by
// OnetimeOptions.Validate if the designated constraints aren't met.
type OnetimeOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OnetimeOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OnetimeOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OnetimeOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OnetimeOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OnetimeOptionsValidationError) ErrorName() string { return "OnetimeOptionsValidationError" }

// Error satisfies the builtin error interface
func (e OnetimeOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOnetimeOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OnetimeOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OnetimeOptionsValidationError{}

// Validate checks the field values on RepeatCrontabSet with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RepeatCrontabSet) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatCrontabSet with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RepeatCrontabSetMultiError, or nil if none found.
func (m *RepeatCrontabSet) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatCrontabSet) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Min != nil {
		// no validation rules for Min
	}

	if m.Hour != nil {
		// no validation rules for Hour
	}

	if m.Day != nil {
		// no validation rules for Day
	}

	if m.Month != nil {
		// no validation rules for Month
	}

	if m.Week != nil {
		// no validation rules for Week
	}

	if len(errors) > 0 {
		return RepeatCrontabSetMultiError(errors)
	}

	return nil
}

// RepeatCrontabSetMultiError is an error wrapping multiple validation errors
// returned by RepeatCrontabSet.ValidateAll() if the designated constraints
// aren't met.
type RepeatCrontabSetMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepeatCrontabSetMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepeatCrontabSetMultiError) AllErrors() []error { return m }

// RepeatCrontabSetValidationError is the validation error returned by
// RepeatCrontabSet.Validate if the designated constraints aren't met.
type RepeatCrontabSetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatCrontabSetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatCrontabSetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatCrontabSetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatCrontabSetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatCrontabSetValidationError) ErrorName() string { return "RepeatCrontabSetValidationError" }

// Error satisfies the builtin error interface
func (e RepeatCrontabSetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatCrontabSet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatCrontabSetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatCrontabSetValidationError{}

// Validate checks the field values on RepeatOptions with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RepeatOptions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RepeatOptions with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RepeatOptionsMultiError, or
// nil if none found.
func (m *RepeatOptions) ValidateAll() error {
	return m.validate(true)
}

func (m *RepeatOptions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCrontab()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RepeatOptionsValidationError{
					field:  "Crontab",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RepeatOptionsValidationError{
					field:  "Crontab",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCrontab()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RepeatOptionsValidationError{
				field:  "Crontab",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.Start != nil {
		// no validation rules for Start
	}

	if m.End != nil {
		// no validation rules for End
	}

	if m.CrontabDuration != nil {
		// no validation rules for CrontabDuration
	}

	if m.Expire != nil {
		// no validation rules for Expire
	}

	if len(errors) > 0 {
		return RepeatOptionsMultiError(errors)
	}

	return nil
}

// RepeatOptionsMultiError is an error wrapping multiple validation errors
// returned by RepeatOptions.ValidateAll() if the designated constraints
// aren't met.
type RepeatOptionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RepeatOptionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RepeatOptionsMultiError) AllErrors() []error { return m }

// RepeatOptionsValidationError is the validation error returned by
// RepeatOptions.Validate if the designated constraints aren't met.
type RepeatOptionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RepeatOptionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RepeatOptionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RepeatOptionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RepeatOptionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RepeatOptionsValidationError) ErrorName() string { return "RepeatOptionsValidationError" }

// Error satisfies the builtin error interface
func (e RepeatOptionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRepeatOptions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RepeatOptionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RepeatOptionsValidationError{}

// Validate checks the field values on Tag with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Tag) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Tag with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TagMultiError, or nil if none found.
func (m *Tag) ValidateAll() error {
	return m.validate(true)
}

func (m *Tag) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return TagMultiError(errors)
	}

	return nil
}

// TagMultiError is an error wrapping multiple validation errors returned by
// Tag.ValidateAll() if the designated constraints aren't met.
type TagMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TagMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TagMultiError) AllErrors() []error { return m }

// TagValidationError is the validation error returned by Tag.Validate if the
// designated constraints aren't met.
type TagValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TagValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TagValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TagValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TagValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TagValidationError) ErrorName() string { return "TagValidationError" }

// Error satisfies the builtin error interface
func (e TagValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTag.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TagValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TagValidationError{}
