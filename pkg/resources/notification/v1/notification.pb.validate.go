// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/resources/notification/v1/notification.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DingTalkRobot with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DingTalkRobot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DingTalkRobot with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DingTalkRobotMultiError, or
// nil if none found.
func (m *DingTalkRobot) ValidateAll() error {
	return m.validate(true)
}

func (m *DingTalkRobot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Webhook

	// no validation rules for Secret

	if len(errors) > 0 {
		return DingTalkRobotMultiError(errors)
	}

	return nil
}

// DingTalkRobotMultiError is an error wrapping multiple validation errors
// returned by DingTalkRobot.ValidateAll() if the designated constraints
// aren't met.
type DingTalkRobotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DingTalkRobotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DingTalkRobotMultiError) AllErrors() []error { return m }

// DingTalkRobotValidationError is the validation error returned by
// DingTalkRobot.Validate if the designated constraints aren't met.
type DingTalkRobotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DingTalkRobotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DingTalkRobotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DingTalkRobotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DingTalkRobotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DingTalkRobotValidationError) ErrorName() string { return "DingTalkRobotValidationError" }

// Error satisfies the builtin error interface
func (e DingTalkRobotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDingTalkRobot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DingTalkRobotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DingTalkRobotValidationError{}

// Validate checks the field values on FeishuRobot with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FeishuRobot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeishuRobot with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FeishuRobotMultiError, or
// nil if none found.
func (m *FeishuRobot) ValidateAll() error {
	return m.validate(true)
}

func (m *FeishuRobot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Webhook

	// no validation rules for Secret

	if len(errors) > 0 {
		return FeishuRobotMultiError(errors)
	}

	return nil
}

// FeishuRobotMultiError is an error wrapping multiple validation errors
// returned by FeishuRobot.ValidateAll() if the designated constraints aren't met.
type FeishuRobotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeishuRobotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeishuRobotMultiError) AllErrors() []error { return m }

// FeishuRobotValidationError is the validation error returned by
// FeishuRobot.Validate if the designated constraints aren't met.
type FeishuRobotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeishuRobotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeishuRobotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeishuRobotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeishuRobotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeishuRobotValidationError) ErrorName() string { return "FeishuRobotValidationError" }

// Error satisfies the builtin error interface
func (e FeishuRobotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeishuRobot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeishuRobotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeishuRobotValidationError{}

// Validate checks the field values on HTTPRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HTTPRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HTTPRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HTTPRequestMultiError, or
// nil if none found.
func (m *HTTPRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HTTPRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Url

	if len(errors) > 0 {
		return HTTPRequestMultiError(errors)
	}

	return nil
}

// HTTPRequestMultiError is an error wrapping multiple validation errors
// returned by HTTPRequest.ValidateAll() if the designated constraints aren't met.
type HTTPRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HTTPRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HTTPRequestMultiError) AllErrors() []error { return m }

// HTTPRequestValidationError is the validation error returned by
// HTTPRequest.Validate if the designated constraints aren't met.
type HTTPRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HTTPRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HTTPRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HTTPRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HTTPRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HTTPRequestValidationError) ErrorName() string { return "HTTPRequestValidationError" }

// Error satisfies the builtin error interface
func (e HTTPRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHTTPRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HTTPRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HTTPRequestValidationError{}

// Validate checks the field values on MailGroup with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MailGroup) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MailGroup with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MailGroupMultiError, or nil
// if none found.
func (m *MailGroup) ValidateAll() error {
	return m.validate(true)
}

func (m *MailGroup) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MailGroupMultiError(errors)
	}

	return nil
}

// MailGroupMultiError is an error wrapping multiple validation errors returned
// by MailGroup.ValidateAll() if the designated constraints aren't met.
type MailGroupMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MailGroupMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MailGroupMultiError) AllErrors() []error { return m }

// MailGroupValidationError is the validation error returned by
// MailGroup.Validate if the designated constraints aren't met.
type MailGroupValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MailGroupValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MailGroupValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MailGroupValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MailGroupValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MailGroupValidationError) ErrorName() string { return "MailGroupValidationError" }

// Error satisfies the builtin error interface
func (e MailGroupValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMailGroup.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MailGroupValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MailGroupValidationError{}

// Validate checks the field values on Notification with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Notification) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Notification with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NotificationMultiError, or
// nil if none found.
func (m *Notification) ValidateAll() error {
	return m.validate(true)
}

func (m *Notification) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	if all {
		switch v := interface{}(m.GetDingTalkRobot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "DingTalkRobot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "DingTalkRobot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDingTalkRobot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "DingTalkRobot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetHttpRequest()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "HttpRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "HttpRequest",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetHttpRequest()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "HttpRequest",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetWechatRobot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "WechatRobot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "WechatRobot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWechatRobot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "WechatRobot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMailGroup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "MailGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "MailGroup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMailGroup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "MailGroup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFeishuRobot()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "FeishuRobot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "FeishuRobot",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFeishuRobot()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "FeishuRobot",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSms()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Sms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, NotificationValidationError{
					field:  "Sms",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSms()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return NotificationValidationError{
				field:  "Sms",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return NotificationMultiError(errors)
	}

	return nil
}

// NotificationMultiError is an error wrapping multiple validation errors
// returned by Notification.ValidateAll() if the designated constraints aren't met.
type NotificationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NotificationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NotificationMultiError) AllErrors() []error { return m }

// NotificationValidationError is the validation error returned by
// Notification.Validate if the designated constraints aren't met.
type NotificationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NotificationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NotificationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NotificationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NotificationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NotificationValidationError) ErrorName() string { return "NotificationValidationError" }

// Error satisfies the builtin error interface
func (e NotificationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNotification.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NotificationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NotificationValidationError{}

// Validate checks the field values on SMS with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *SMS) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SMS with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SMSMultiError, or nil if none found.
func (m *SMS) ValidateAll() error {
	return m.validate(true)
}

func (m *SMS) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SMSMultiError(errors)
	}

	return nil
}

// SMSMultiError is an error wrapping multiple validation errors returned by
// SMS.ValidateAll() if the designated constraints aren't met.
type SMSMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SMSMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SMSMultiError) AllErrors() []error { return m }

// SMSValidationError is the validation error returned by SMS.Validate if the
// designated constraints aren't met.
type SMSValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SMSValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SMSValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SMSValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SMSValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SMSValidationError) ErrorName() string { return "SMSValidationError" }

// Error satisfies the builtin error interface
func (e SMSValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSMS.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SMSValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SMSValidationError{}

// Validate checks the field values on WeChatRobot with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *WeChatRobot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WeChatRobot with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in WeChatRobotMultiError, or
// nil if none found.
func (m *WeChatRobot) ValidateAll() error {
	return m.validate(true)
}

func (m *WeChatRobot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Webhook

	if len(errors) > 0 {
		return WeChatRobotMultiError(errors)
	}

	return nil
}

// WeChatRobotMultiError is an error wrapping multiple validation errors
// returned by WeChatRobot.ValidateAll() if the designated constraints aren't met.
type WeChatRobotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WeChatRobotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WeChatRobotMultiError) AllErrors() []error { return m }

// WeChatRobotValidationError is the validation error returned by
// WeChatRobot.Validate if the designated constraints aren't met.
type WeChatRobotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WeChatRobotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WeChatRobotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WeChatRobotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WeChatRobotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WeChatRobotValidationError) ErrorName() string { return "WeChatRobotValidationError" }

// Error satisfies the builtin error interface
func (e WeChatRobotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWeChatRobot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WeChatRobotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WeChatRobotValidationError{}
