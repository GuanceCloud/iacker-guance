// package v1

// import (
// 	"strings"
// 	"encoding/json"
// 	gotemplate "text/template"

// 	template "github.com/GuanceCloud/iacker/pkg/template/v1"
// )

// // Generate godoc files
// outputs: files: "errors.go": template.#File & {
// 	_template: """
// 		// Code generated by openrms. DO NOT EDIT.

// 		package v1

// 		import (
// 			fmt "fmt"
// 			errors "github.com/go-kratos/kratos/v2/errors"
// 		)

// 		// This is a compile-time assertion to ensure that this generated file
// 		// is compatible with the kratos package it is being compiled against.
// 		const _ = errors.SupportPackageIsVersion1

// 		const (
// 		{{- range $i, $err := .errors }}
// 			// ErrorReason{{ $err.name }} is {{ $err.title }}.
// 			ErrorReason{{ $err.name }} = "{{ $err.name }}"
// 		{{ end }}
// 		)

// 		{{ range $i, $err := .errors }}
// 		// Is{{ $err.name }} is returned when {{ $err.title }}.
// 		func Is{{ $err.name }}(err error) bool {
// 			if err == nil {
// 				return false
// 			}
// 			e := errors.FromError(err)
// 			return e.Reason == ErrorReason{{ $err.name }} && e.Code == {{ $err.code }}
// 		}

// 		// Error{{ $err.name }} is returned when {{ $err.title }}.
// 		func Error{{ $err.name }}(format string, args ...interface{}) *errors.Error {
// 			return errors.New({{ $err.code }}, ErrorReason{{ $err.name }}, fmt.Sprintf(format, args...))
// 		}
// 		{{ end }}
// 		"""

// 	content: gotemplate.Execute(_template, {
// 		errors: [
// 			for errname, errinfo in inputs.errors {
// 				{
// 					name: strings.Join([for _, token in strings.Split(errname, "_") { strings.ToTitle(strings.ToLower(token)) }], "")
// 					title: errinfo.title.en
// 					code: *errinfo.meta.code | 0
// 				}
// 		  }
// 		]
// 	})
// }

// // Generate error json file
// outputs: files: "errors.json": {
// 	content: json.Marshal([
// 		for errname, errinfo in (*inputs.errors | {}) {
// 				{
// 					name: strings.Join([for _, token in strings.Split(errname, "_") { strings.ToTitle(strings.ToLower(token)) }], "")
// 					title: errinfo.title
// 					meta: errinfo.meta
// 				}
// 		}
// 	])
// }