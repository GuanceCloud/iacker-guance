package ent

import (
  "strings"
	gotemplate "text/template"
	template "github.com/GuanceCloud/iacker/pkg/template/v1"
)

_descriptor_template: """
// Code generated by Iacker. DO NOT EDIT.
package data

import (
	"context"
	"fmt"

	"github.com/go-kratos/kratos/v2/log"
	"github.com/hashicorp/go-multierror"

	"github.com/GuanceCloud/iacker-server/internal/gen/ent"
	"github.com/GuanceCloud/iacker-server/pkg/data/client"
	"github.com/GuanceCloud/iacker-server/pkg/data/repo"
	"github.com/GuanceCloud/iacker-server/pkg/types"
	errors "github.com/GuanceCloud/iacker-server/pkg/errors/v1"
)

type {{ .lowername }}ResourceRepo struct {
	data *client.Data
}

// New{{ .camelname }}ResourceRepo will create a repo instance to interact with the resource
func New{{ .camelname }}ResourceRepo(data *client.Data, logger log.Logger) repo.ResourceRepo {
	return &{{ .lowername }}ResourceRepo{
		data: data,
	}
}

// Save will save the resource to the database
func (repo *{{ .lowername }}ResourceRepo) Save(ctx context.Context, g *types.Resource) error {
	req, err := repo.data.Graph.{{ .camelname }}.Get(ctx, g.Identifier.String())
	if err != nil && !ent.IsNotFound(err) {
		return err
	}

	var opErr error
	if err == nil {
		_, opErr = repo.data.Graph.{{ .camelname }}.
			UpdateOneID(g.Identifier.String()).
			SetState(req.State).
			SetService(g.Identifier.Service).
			SetOwner(g.Identifier.Owner).
			Save(ctx)
	} else {
		_, opErr = repo.data.Graph.{{ .camelname }}.
			Create().
			SetID(g.Identifier.String()).
			SetState(g.State).
		  SetPartition(g.Identifier.Partition).
			SetRegion(g.Identifier.Region).
			SetService(g.Identifier.Service).
			SetOwner(g.Identifier.Owner).
			Save(ctx)
	}
	return opErr
}

// Get will get the resource from the database
func (repo *{{ .lowername }}ResourceRepo) Get(ctx context.Context, resourceId *types.Identifier) (*types.Resource, error) {
	rs, err := repo.data.Graph.{{ .camelname }}.Get(ctx, resourceId.String())
	if err != nil {
		if ent.IsNotFound(err) {
			return nil, errors.ErrorNotFound("resource %s not found", resourceId.String())
		}
		return nil, err
	}
	return &types.Resource{
		Identifier: resourceId,
		State:      rs.State,
		CreatedAt:  rs.CreatedAt,
	}, nil
}

// Delete will delete the resource from the database
func (repo *{{ .lowername }}ResourceRepo) Delete(ctx context.Context, resourceId *types.Identifier) error {
	err := repo.data.Graph.{{ .camelname }}.DeleteOneID(resourceId.String()).Exec(ctx)
	if err != nil {
		return fmt.Errorf("internal database error: %w", err)
	}
	return nil
}

// List will list the resources from the database
func (repo *{{ .lowername }}ResourceRepo) List(ctx context.Context, query *types.ResourceQuery) ([]*types.Resource, error) {
	rows, err := repo.data.Graph.{{ .camelname }}.Query().All(ctx)
	if err != nil {
		return nil, fmt.Errorf("internal database error: %w", err)
	}

	var mErr error
	resources := make([]*types.Resource, 0, len(rows))
	for _, row := range rows {
		id, err := types.ParseIdentifier(row.ID)
		if err != nil {
			mErr = multierror.Append(mErr, err)
			continue
		}
		resources = append(resources, &types.Resource{
			Identifier: &id,
			State:    row.State,
			CreatedAt: row.CreatedAt,
		})
	}
	return resources, nil
}
"""


for rsname, rs in resources {
	outputs: files: "internal/gen/repos/\(strings.ToLower(rsname))/resource.go": template.#File & {
		content: gotemplate.Execute(_descriptor_template, {
			"lowername": strings.ToLower(rsname),
			"camelname": rsname,
		})
	}
}
