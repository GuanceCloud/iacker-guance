package ent

import (
	"strings"
	gotemplate "text/template"

	template "github.com/GuanceCloud/iacker/pkg/template/v1"
)

_templates: """
// Code generated by Iacker. DO NOT EDIT.
package schema

import (
	"entgo.io/ent"
	{{ if .refs }}"entgo.io/ent/schema/edge"{{ end }}

	"github.com/GuanceCloud/iacker-server/internal/gen/ent/mixins"
)

// {{ .camelname }} holds the schema definition for the {{ .camelname }} entity.
type {{ .camelname }} struct {
	ent.Schema
}

// Fields of the {{ .camelname }}.
func ({{ .camelname }}) Fields() []ent.Field {
	return []ent.Field{}
}

// Edges of the {{ .camelname }}.
func ({{ .camelname }}) Edges() []ent.Edge {
	return []ent.Edge{
		{{- range $ref, $plural := .refs }}
		edge.To("related_{{ $plural }}", {{ $ref }}.Type),
		{{- end }}
	}
}

// Mixin of the {{ .camelname }}.
func ({{ .camelname }}) Mixin() []ent.Mixin {
	return []ent.Mixin{
		mixins.ResourceMixin{},
	}
}
"""

for rsname, rs in resources {
	outputs: files: "internal/gen/ent/schema/\(strings.ToLower(rsname)).go": template.#File & {
		_refs: {
			for modelname, model in rs.models {
				for propname, prop in model.properties {
					if prop.schema.type == "ref" {
						"\(prop.schema.ref)": resources[prop.schema.ref].plural
					}
				}
			}
		}
		content: gotemplate.Execute(_templates, {
			"lowername": strings.ToLower(rsname),
			"camelname": rsname,
			"info": rs,
			"model": rs.models,
			"refs": _refs,
		})
	}
}
